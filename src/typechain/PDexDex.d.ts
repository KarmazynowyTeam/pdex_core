/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PDexDexInterface extends Interface {
  functions: {
    matchOffers: TypedFunctionDescription<{ encode([]: []): string }>;

    doOffersMatch: TypedFunctionDescription<{ encode([]: []): string }>;

    addBidOffer: TypedFunctionDescription<{
      encode([_companyShares, _sharesAmount, _sharePrice]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    addAskOffer: TypedFunctionDescription<{
      encode([_companyShares, _sharesAmount, _sharePrice]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class PDexDex extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PDexDex;
  attach(addressOrName: string): PDexDex;
  deployed(): Promise<PDexDex>;

  on(event: EventFilter | string, listener: Listener): PDexDex;
  once(event: EventFilter | string, listener: Listener): PDexDex;
  addListener(eventName: EventFilter | string, listener: Listener): PDexDex;
  removeAllListeners(eventName: EventFilter | string): PDexDex;
  removeListener(eventName: any, listener: Listener): PDexDex;

  interface: PDexDexInterface;

  functions: {
    matchOffers(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    doOffersMatch(): Promise<boolean>;

    addBidOffer(
      _companyShares: string,
      _sharesAmount: BigNumberish,
      _sharePrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addAskOffer(
      _companyShares: string,
      _sharesAmount: BigNumberish,
      _sharePrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  matchOffers(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  doOffersMatch(): Promise<boolean>;

  addBidOffer(
    _companyShares: string,
    _sharesAmount: BigNumberish,
    _sharePrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addAskOffer(
    _companyShares: string,
    _sharesAmount: BigNumberish,
    _sharePrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    matchOffers(): Promise<BigNumber>;

    doOffersMatch(): Promise<BigNumber>;

    addBidOffer(
      _companyShares: string,
      _sharesAmount: BigNumberish,
      _sharePrice: BigNumberish
    ): Promise<BigNumber>;

    addAskOffer(
      _companyShares: string,
      _sharesAmount: BigNumberish,
      _sharePrice: BigNumberish
    ): Promise<BigNumber>;
  };
}
